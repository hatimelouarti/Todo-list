(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))s(a);new MutationObserver(a=>{for(const i of a)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function t(a){const i={};return a.integrity&&(i.integrity=a.integrity),a.referrerPolicy&&(i.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?i.credentials="include":a.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(a){if(a.ep)return;a.ep=!0;const i=t(a);fetch(a.href,i)}})();class g{constructor(e,t){this.id=g.generateUniqueId(),this.title=e,this.state=t}static generateUniqueId(){return Date.now().toString()}}class c{static displaytasks(){console.log(r.gettask());const e=document.querySelector(".tasks-list");e.innerHTML="",r.gettask().forEach(s=>{c.addtasktopage(s)})}static addtasktopage(e){const t=document.querySelector(".tasks-list"),s=`
    <div class="task" draggable="true">
      <div class="check">
        <input type="checkbox" id="myCheckbox" value="${e.id}" ${e.state?"checked":""}/>
      </div>
      <div class="task-title ${e.state?"line":""}">${e.title}</div>
      <div class="remove">
        <img src="./public/images/icon-cross.svg" alt="${e.id}" />
      </div>
    </div>`;t.insertAdjacentHTML("beforeend",s)}static deletetask(e){e.parentElement.classList.contains("remove")&&e.parentElement.parentElement.remove()}static unfinished_task_calculate(){const e=r.gettask();let t=0;e.forEach(s=>{s.state===!1&&(t+=1)}),document.querySelector(".itemsleft span").innerHTML=`${t}`}static clear(){r.gettask().forEach(t=>{t.state===!0&&r.removetask(t.id)})}static filter(e){if(e==="All")c.displaytasks();else if(e==="Active"){const t=r.gettask().filter(s=>!s.state);c.displayFilteredTasks(t)}else if(e==="Completed"){const t=r.gettask().filter(s=>s.state);c.displayFilteredTasks(t)}}static displayFilteredTasks(e){const t=document.querySelector(".tasks-list");t.innerHTML="",e.forEach(s=>{c.addtasktopage(s)})}}class r{static gettask(){let e;return localStorage.getItem("tasks")===null?e=[]:e=JSON.parse(localStorage.getItem("tasks")),e}static addtask(e){const t=r.gettask();t.push(e),localStorage.setItem("tasks",JSON.stringify(t))}static removetask(e){const t=r.gettask();t.forEach((s,a)=>{s.id===e&&t.splice(a,1)}),localStorage.setItem("tasks",JSON.stringify(t))}static changestate(e){const t=r.gettask();t.forEach((s,a)=>{const l=document.querySelector(`input[type="checkbox"][value="${s.id}"]`).closest(".task").querySelector(".task-title");s.id===e&&(t[a].state=!t[a].state,l.classList.toggle("line"))}),localStorage.setItem("tasks",JSON.stringify(t))}static swapid(e,t){const s=r.gettask(),a=s.findIndex(l=>l.id===e),i=s.findIndex(l=>l.id===t),o=[...s];if(i>=o.length){let l=i-o.length+1;for(;l--;)o.push(void 0)}o.splice(i,0,o.splice(a,1)[0]),localStorage.setItem("tasks",JSON.stringify(o))}}const u=document.querySelector('.input-task input[type="text"]');u.addEventListener("click",n=>{n.preventDefault(),u.value==="Create a new todo..."&&(u.value="")});u.addEventListener("blur",n=>{u.value===""&&(u.value="Create a new todo...")});const f=document.querySelector(".switch img");f.addEventListener("click",n=>{document.documentElement.getAttribute("data-theme")==="dark"?(document.documentElement.setAttribute("data-theme","light"),document.querySelector(".switch img").src="./public/images/icon-moon.svg"):(document.documentElement.setAttribute("data-theme","dark"),document.querySelector(".switch img").src="./public/images/icon-sun.svg")});document.addEventListener("DOMContentLoaded",c.displaytasks());document.addEventListener("keypress",n=>{if(n.key==="Enter"){n.preventDefault();const e=document.querySelector(".input-task input[type='text']");if(!e.value||e.value.includes("Create a new todo...")||e.value.length>=100){console.log("Input is empty or contains default text");return}else{const t=new g(e.value,!1);r.addtask(t),e.value="",c.addtasktopage(t);const s=document.querySelectorAll(".task"),a=document.querySelector(".tasks-list");s.forEach(i=>{i.addEventListener("dragstart",()=>{i.classList.add("draging")}),i.addEventListener("dragend",()=>{i.classList.remove("draging")})}),a.addEventListener("dragover",k)}}});document.querySelector(".tasks-list").addEventListener("click",n=>{const e=n.target.alt;r.removetask(e),c.deletetask(n.target)});document.querySelector(".tasks-list").addEventListener("click",n=>{const e=n.target.getAttribute("value");r.changestate(e),c.unfinished_task_calculate()});document.addEventListener("DOMContentLoaded",c.unfinished_task_calculate());document.querySelector(".clear").addEventListener("click",()=>{});addEventListener("click",n=>{const e=n.target;e.closest(".filterselector")&&(e.innerHTML==="All"?c.filter("All"):e.innerHTML==="Active"?c.filter("Active"):e.innerHTML==="Completed"&&c.filter("Completed"))});const m=document.querySelectorAll(".task"),d=document.querySelector(".tasks-list");m.forEach(n=>{n.addEventListener("dragstart",()=>{n.classList.add("draging")}),n.addEventListener("dragend",()=>{n.classList.remove("draging")})});const k=n=>{n.preventDefault();const e=d.querySelector(".draging"),s=[...d.querySelectorAll(".task:not(.draging)")].find(a=>n.clientY<=a.offsetTop+a.offsetHeight/2);if(e){s?d.insertBefore(e,s):d.appendChild(e);const a=e.querySelector("input[type='checkbox']").value,i=s?s.querySelector("input[type='checkbox']").value:null;r.swapid(a,i)}};d.addEventListener("dragover",k);d.addEventListener("dragenter",n=>n.preventDefault());
